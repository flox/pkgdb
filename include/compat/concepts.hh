/* ========================================================================== *
 *
 * @file compat/concepts.hh
 *
 * @brief Provides backports of some `concepts` features that are missing in
 *        Clang v11.
 *
 *
 * -------------------------------------------------------------------------- */

#pragma once

#ifdef __clang__

/* -------------------------------------------------------------------------- */

#include <concepts>


/* -------------------------------------------------------------------------- */

namespace std {

/* -------------------------------------------------------------------------- */

  template <class T>
concept destructible = std::is_nothrow_destructible_v<T>;


/* -------------------------------------------------------------------------- */

  template <class T, class... Args>
concept constructible_from =
  std::destructible<T> && std::is_constructible_v<T, Args...>;


/* -------------------------------------------------------------------------- */

  template <class From, class To>
concept convertible_to =
  std::is_convertible_v<From, To> &&
  requires { static_cast<To>( std::declval<From>() ); };


/* -------------------------------------------------------------------------- */

}  /* End namespace `std' */

/* -------------------------------------------------------------------------- */

#endif  // ifdef __clang__


/* -------------------------------------------------------------------------- *
 *
 *
 *
 * ========================================================================== */
