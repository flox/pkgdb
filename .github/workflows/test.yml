name: Test
on:
  workflow_dispatch:
  push:
    branches:
      -  main
    paths:
      - '**'
      - '!**/README*'
      - '!**/CONTRIBUTING*'
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  all-tests:
    name: Tests ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v22
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            substituters = https://cache.nixos.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
            max-jobs = auto
            cores = 0
            substitute = true
            builders-use-substitutes = true
            fallback = true
            connect-timeout = 5
            stalled-download-timeout = 90
            timeout = 0

      - name: Setup
        run: |
          echo "# ============================================================================ #" >&2;
          echo 'Runner Version' >&2;
          { printf '    bash   version: '; bash   --version|head -n1; } >&2;
          { printf '    nix    version: '; nix    --version; } >&2;
          echo "# ---------------------------------------------------------------------------- #" >&2;
          echo 'Development Environment Versions ( this may take a minute )' >&2;
          NO_WELCOME=: nix develop --no-update-lock-file --command sh -c '
            echo '';
            printf '    nix    version: '; nix    --version;
            printf "    CXX    version: "; $CXX --version|head -n1;
          ' >&2;
          echo "# ============================================================================ #" >&2;

      - name: Run Build
        run: nix develop --no-update-lock-file --command make -j4

      - name: Build Tests
        run: nix develop --no-update-lock-file --command make tests -j4

      - name: Nix Flake Check
        run: nix flake check

      # This is performed to reduce cpu/memory overhead in tests later.
      # NOTE: Ensure this `rev' is aligned with `<pkgdb>/tests/setup_suite.bats'
      - name: Warm Nix Eval Caches
        run: |
          set -eu;
          set -o pipefail;
          rev="e8039594435c68eb4f780f3e9bf3972a7399c4b1"
          echo "Priming Eval Cache: nixpkgs/$rev" >&2;
          NIX_SYSTEM="$(
            nix eval --raw --impure --expr builtins.currentSystem;
          )";
          nix flake show --legacy "github:NixOS/nixpkgs/$rev"  \
                         --system "$NIX_SYSTEM" >/dev/null;

      - name: Run Tests
        run: nix develop --no-update-lock-file --command make check -j4

  # Aggregate test results
  all-tests-success:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Tests ( All Systems )
    needs: all-tests
    steps:
      - if: >-
          ${{
              contains( needs.*.result, 'failure'   ) ||
              contains( needs.*.result, 'cancelled' )
           }}
        run: exit 1
